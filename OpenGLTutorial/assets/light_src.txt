// =========================================================================directional
struct Light {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

// ambient
vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

// diffuse
vec3 norm = normalize(Normal);
vec3 lightDir = normalize(-light.direction);
float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TexCoord)));

// specular
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess * 128);
vec3 specular = light.specular * (spec * vec3(texture(material.specular, TexCoord)));

FragColor = vec4(vec3(ambient + diffuse + specular), 1.0);





// ======================================================= point
struct Light {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float k0;
	float k1;
	float k2;
};

// ambient
vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

// diffuse
vec3 norm = normalize(Normal);
vec3 lightDir = normalize(light.position - FragPos);
float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TexCoord)));

// specular
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightDir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess * 128);
vec3 specular = light.specular * (spec * vec3(texture(material.specular, TexCoord)));

// calculate attenuation
float dist = length(light.position - FragPos);
float attenuation = 1.0 / (light.k0 + light.k1 * dist + light.k2 * (dist * dist));

// apply attenuation
ambient *= attenuation;
diffuse *= attenuation;
specular *= attenuation;



// ======================================== spot light
struct Light {
	vec3 position;
	vec3 direction;

	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float k0;
	float k1;
	float k2;
};

vec3 lightDir = normalize(light.position - FragPos);
float theta = dot(lightDir, normalize(-light.direction));

if (theta > light.outerCutOff) {
	// if in cutoff, render light
	// > because using cosines and not degrees

	// ambient
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));

	// diffuse
	vec3 norm = normalize(Normal);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * (diff * vec3(texture(material.diffuse, TexCoord)));

	// specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess * 128);
	vec3 specular = light.specular * (spec * vec3(texture(material.specular, TexCoord)));

	// calculate Intensity
	float intensity = clamp((theta - light.outerCutOff) / (light.cutOff - light.outerCutOff), 0.0, 1.0);
	diffuse *= intensity;
	specular *= intensity;

	// calculate attenuation
	float dist = length(light.position - FragPos);
	float attenuation = 1.0 / (light.k0 + light.k1 * dist + light.k2 * (dist * dist));

	// apply attenuation
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	FragColor = vec4(vec3(ambient + diffuse + specular), 1.0);
}
else {
	// render just ambient
	FragColor = vec4(light.ambient * vec3(texture(material.diffuse, TexCoord)), 1.0);
}